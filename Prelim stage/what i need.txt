the code works well, but the following need to be done:
1. when i type into the terminal, the inputted text is shown nin the next line, rather than next to the '$' sign. but its only when i press enter does the command i put in get displayed right next to the '$'. it should be right next to the $ when i type anything in!!

2. right now, only these commands work: "help": "Available commands: help, clear, echo, ls, pwd". i need all the below to work:
	directory management: ls, cd, pwd, mkdir, rmdir
	File Management: cp, mv, rm, touch, find
	System Monitoring: ps, top, df, du, uptime
	Networking: ping, netstat, ss, curl, wget
	User Management: useradd, usermod, passwd, groups
	Permissions: chmod, chown, chgrp, umask
	System Services: systemctl, service, journalctl, init
	Text Processing: cat, grep, sed, awk, cut

3. all the above are levels, with each command as sublevels. below are teh system features:
	Interactive Learning Environment
	Description and Priority
	The platform offers a simulated terminal that allows users to practice Linux commands in a real-time environment, enhancing hands-on experience and practical knowledge. Priority: High.
	Benefit: Enables interactive learning and builds practical Linux command proficiency.
	Penalty: Could overwhelm users if the difficulty progression is not well-calibrated.
	Cost: Development and maintenance of the adaptive system.
	Risk: Misinterpretation of performance data may result in ineffective progression adjustments.

	Stimulus/Response Sequences
	User Action 1: User enters a Linux command in the simulated terminal.
	System Response 1: The system processes the command and displays the output, providing a realistic experience.
	User Action 2: User successfully completes a task or set of commands.
	System Response 2: The system tracks performance and adjusts the next set of challenges, gradually increasing in difficulty.

	Functional Requirements
	REQ-1: The system must allow users to enter Linux commands into a simulated terminal and execute them in real-time.
	REQ-2: The system should adapt the difficulty of tasks based on the user's performance and progress, ensuring a personalized learning experience.
	REQ-3: The system must provide clear feedback and suggestions when a user inputs an incorrect command.
	Gamified Progression System
	Description and Priority
	The platform incorporates a structured, gamified progression system that rewards users with achievements and badges as they complete tasks. Priority: High.
	Benefit: Provides an engaging, motivational structure that drives continued learning.
	Penalty: Risk of the user focusing too much on rewards rather than skill development.
	Cost: Designing and implementing a complex leveling system.
	Risk: The pacing of levels must be well-balanced to avoid frustration or disengagement.

	Stimulus/Response Sequences
	User Action 1: The user completes a set of tasks related to a specific functionality (e.g., File Management).
	System Response 1: The system rewards the user with badges or achievements based on their performance.
	User Action 2: The user progresses through levels, completing challenges.
	System Response 2: The system unlocks new levels, each with more advanced tasks focusing on different Linux commands.


	Functional Requirements
	REQ-1: The system must track user progress through levels and unlock new challenges as users complete tasks.
	REQ-2: The system should reward users with badges and achievements when mastering specific commands.
	REQ-3: The system should progressively increase task difficulty and introduce new command topics in a structured way.


	Terminal Simulator
	4.3.1 Description and Priority
	This feature simulates a Linux terminal where users can practice commands  directly within a web-based interface. It allows for real-time feedback and command validation, enhancing the learning process. Users can track their progress and practice a variety of commands. Priority: High.

	4.3.2 Stimulus/Response Sequences
	User Action 1: The user selects a command challenge or tutorial in the application.
	System Response 1: The system displays a simulated terminal interface.
	User Action 2: The user types a Linux command into the terminal.
	System Response 2: The system validates the entered command, and if correct, executes the command within the simulated environment, providing feedback.
	User Action 3: The user receives real-time feedback, such as a success message or an error prompt.
	System Response 3: If the command is correct, the system updates the user’s progress and unlocks the next challenge. If the command is incorrect, the system provides hints or suggestions for correction.
	4.3.3 Functional Requirements
	REQ-1: The application must provide an interactive, simulated Linux terminal interface for the user to practice commands.
	REQ-2: The application must validate the entered Linux commands and provide real-time feedback.
	REQ-3: The application must offer hints or feedback for incorrect command usage.
	REQ-4: The terminal simulator must execute the commands in a controlled, safe environment to prevent damage to the local system.
	REQ-5: The application should allow users to reset the simulated environment for practice purposes without affecting their progress.


	Performance Tracking and Feedback
	Description and Priority
	The system continuously tracks user performance, offering insights into executed commands, common mistakes, and overall progress. A dashboard displays detailed reports, helping users identify areas for improvement and monitor their learning journey effectively. Priority: High.
	Benefit: Ensures users can track their learning and identify areas needing improvement.
	Penalty: Users may become discouraged by frequent error reports.
	Cost: Developing a comprehensive tracking and feedback system.
	Risk: Feedback may become overwhelming if not well-structured.

	4.4.2 Stimulus/Response Sequences
	User Action 1: The user completes a series of commands or tasks.
	System Response 1: The system updates the progress dashboard, reflecting       the user’s performance.
	User Action 2: The user views the performance dashboard.
	System Response 2: The system presents a detailed report on the user's executed commands, errors made, and suggestions for improvement.
	User Action 3: The user repeatedly makes a specific error in executing commands.
	System Response 3: The system flags this as a common mistake and provides targeted suggestions to address it.

	4.4.3 Functional Requirements
	REQ-1: The system must record and display user performance metrics, including executed commands, errors, and mistakes.
	REQ-2: The system should provide actionable feedback on mistakes and offer suggestions for improvement.
	REQ-3: The system must include a progress dashboard to allow users to track their learning journey.

	4.5    Error Handling
	4.5.1 Description and Priority
	The system provides clear, specific error messages when users input incorrect commands, accompanied by suggestions or hints to guide correction. This ensures users can learn from mistakes without becoming frustrated. Priority: High.
	Benefit: Helps users improve by addressing errors in real-time.
	Penalty: Misleading error messages could hinder learning.
	Cost: Development of an intelligent error-handling system.
	Risk: Inconsistent or unclear error feedback may confuse users.
	4.5.2 Stimulus/Response Sequences
	User Action 1: The user enters an invalid Linux command.
	System Response 1: The system displays an error message, explaining the mistake and suggesting a solution.
	User Action 2: The user views the error message and follows the suggestion.
	System Response 2: The system allows the user to retry the command, providing immediate feedback on the new input.

	4.5.3 Functional Requirements
	REQ-1: The system must display a clear error message when a user enters an invalid command.
	REQ-2: The system should provide helpful hints or suggestions to correct the error.
	REQ-3: The system must allow users to retry commands after receiving feedback.

pls ensure teh above are given in teh code you make!

4. also, we plan to ask questions at teh end of each command tutorial. each tutorial question is given with a story.
Story-Based Learning: Engages users with narrative-driven challenges to contextualize Linux commands in real-world scenarios.

[each tutorial will have: simple definition of command, synatx, application, different options (if exists; eg: ls options: -a, -t, -l), and then a question in teh form of a story/narrative (eg: elena wants to see the different filesand subdirectories of teh current dir. show her how its done! (ans: ls) )]

pls make the codes/programs, and ensure everything is given!
